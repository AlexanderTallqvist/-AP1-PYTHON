
# -*- coding: cp1252 -*-
# Prov | Uppg. 1, 2, 3, 4, 5
# Alexander Tallqvist


# Uppg. 1

def sum_ints(m, n):
    counter  = n - m
    ret_value = 0

    while counter >= 0:
        temp_value = m + counter
        ret_value  = temp_value + ret_value
        counter    = counter - 1

    return ret_value

#print sum_ints(11,20)


# Uppg. 2

def file_to_list(file_name):
    return_list = []

    try:
      infil = open(file_name, "r")
    except IOError:
      return "Error: File does not appear to exist."

    for line in infil.readlines():
        return_list.append(line)

    infil.close()
    return return_list

def print_temp_list(temp_list):
    for item in temp_list:
        print item.replace(";", " ").strip()

temp_list = file_to_list('tempdata.csv')
#print_temp_list(temp_list)


# Uppg. 3C

import random

# Variables
col = ['A','B','C','D','E','F','G','H']
row = [1,2,3,4,5,6,7,8]
iterator = 1
winner_check = False

# Data containers
legal_moves = []
blacks = []
whites = []

# Setup legal moves
for letter in col:
    for number in row:
        legal_moves.append([letter,number])

# Setup blacks
for i in range(7, 9):
    for letter in col:
        blacks.append(['X', letter, i])

# Setup whites
for i in range(1, 3):
    for letter in col:
        whites.append(['O', letter, i])


# Function that takes turns for blacks and whites
def take_turn(iterator):

    # It is blacks turn to move
    if iterator % 2 == 0:
        if len(blacks) > 0:
            return move_a_piece(-1, blacks, whites, 'blacks', 'whites', 'O', 1)
        else:
            print blacks
            print "Blacks has no more pieces left. The whites win the game!"

    # It is whites turn to move
    else:
        if len(whites) > 0:
            return move_a_piece(1, whites, blacks, 'whites', 'blacks', 'X', 8)
        else:
            print whites
            print "Whites has no more pieces left. The blacks win the game!"


# Function that gets a legal row value for the piece we want to move
def get_legal_row_value(random_piece, color_string, direction):

    piece_row_val = random_piece[2]
    row_index = row.index(piece_row_val)

    if color_string == "whites":
        if row_index < 7:
            row_legal = row[row_index + direction]
        else:
            row_legal = row[row_index]

    if color_string == "blacks":
        if row_index > 0:
            row_legal = row[row_index + direction]
        else:
            row_legal = row[row_index]

    return row_legal


# Function that gets a legal col value for the piece we want to move
def get_legal_col_value(random_piece):

    piece_col_val = random_piece[1]
    col_index = col.index(piece_col_val)
    col_legal = []

    # Piece at col value H
    if col_index == 7:
        col_legal.append(col[col_index - 1])
        col_legal.append(col[col_index])

    # Piece at col value A
    elif col_index == 0:
        col_legal.append(col[col_index + 1])
        col_legal.append(col[col_index])

    # Piece at col value B-G
    else:
        col_legal.append(col[col_index - 1])
        col_legal.append(col[col_index])
        col_legal.append(col[col_index + 1])

    return col_legal


# Function that gets the next possible moves we can take
def get_possible_moves_with_legal_values(col_legal, row_legal, random_piece):

    next_moves = []

    for col_val  in col_legal:
        if [col_val, row_legal] in legal_moves:
            next_moves.append([random_piece[0], col_val, row_legal])

    return next_moves


# Function that rates our moves by their effect on the game, and picks the best one
def get_rating_for_possible_moves(random_piece, next_moves, color, enemy_color, enemy_letter, win_condition):
    move_value = []
    won_by_eating = False

    for move in next_moves:

        # A color might have won the game. Check if it's a legal move
        if move[2] == win_condition:
            if random_piece[1] != move[1]:
                if [enemy_letter, move[1], move[2]] in enemy_color:
                    move_value.append(3)
                    won_by_eating = True
                else:
                    move_value.append(-1)
            else:
                move_value.append(3)

        # We are trying to pleace the piece on a piece of our own
        elif move in color:
            move_value.append(-1)

        # We have the opportunity to eat our opponent
        elif [enemy_letter, move[1], move[2]] in enemy_color:
            move_value.append(2)

        # The square is empty. Make sure that we stay in the correct column
        else:
            if random_piece[1] == move[1]:
                move_value.append(1)
            else:
                move_value.append(-1)

    best_move = max(move_value)
    return [best_move, move_value, won_by_eating]


# Function that prints a status update of the game
def get_status_update(random_piece, our_next_move, color_string, enemy_string, action, by_eating):

    if action == "win":
        print color_string, "moved from", random_piece, "to", our_next_move, "\n"
        if by_eating:
            print color_string, "reached the end by eating a", enemy_string, "piece!"
        else:
            print color_string, "won the game!"

        quit()

    if action == "eat":
        print color_string, "moved from", random_piece, "to", our_next_move
        print color_string, "ate a piece from", enemy_string, "\n"

    if action ==  "move":
        print color_string, "moved from", random_piece, "to", our_next_move, "\n"

    if action ==  "none":
        print color_string, "tried to move", random_piece, ", but couldn't find any free squares to move to... Picking a new piece\n"


# Function that calls other helper functions and determins the status of the game
def move_a_piece(direction, color, enemy_color, color_string, enemy_string, enemy_letter, win_condition):

    # Pick a random piece from the a color array
    random_piece = random.choice(color)

    # Get a legal row value for the selected piece
    row_legal = get_legal_row_value(random_piece, color_string, direction)

    # Get a legal col value for the selected piece
    col_legal = get_legal_col_value(random_piece)

    # Find our next legal moves
    next_moves = get_possible_moves_with_legal_values(col_legal, row_legal, random_piece)

    # Get the best possbile legal move
    return_array = get_rating_for_possible_moves(random_piece, next_moves, color, enemy_color, enemy_letter, win_condition)

    # Use the best possible move to move our piece, and print a status message.
    best_move  = return_array[0]
    move_value = return_array[1]
    by_eating  = return_array[2]

    move_index    = move_value.index(best_move)
    our_next_move = next_moves[move_index]

    # Either whites or blacks have won
    if best_move == 3:
        get_status_update(random_piece, our_next_move, color_string, enemy_string, 'win', by_eating)

    # We can only place the selected piece on our own piece, or make an illegal move. Pick a new piece
    elif best_move == -1:
        get_status_update(random_piece, '', color_string, enemy_string, 'none', by_eating)
        move_a_piece(direction, color, enemy_color, color_string, enemy_string, enemy_letter, win_condition)
        return False

    # We are going to eat an enemy piece
    elif best_move == 2:
        get_status_update(random_piece, our_next_move, color_string, enemy_string, 'eat', by_eating)
        color.pop(color.index(random_piece))
        color.append([random_piece[0], our_next_move[1], our_next_move[2]])
        enemy_color.pop(enemy_color.index([enemy_letter, our_next_move[1], our_next_move[2]]))
        return False

    # We are simply moving forward
    else:
        get_status_update(random_piece, our_next_move, color_string, enemy_string, 'move', by_eating)
        color.pop(color.index(random_piece))
        color.append([random_piece[0], our_next_move[1], our_next_move[2]])
        return False


def main(winner_check, iterator):

    while winner_check == False:
        print "===", "Turn number", iterator, "==="
        winner_check = take_turn(iterator)
        iterator +=1

main(winner_check, iterator)
